#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        b0: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 0 &bt BT_SEL 0>;
            label = "NEW_MACRO";
        };

        b1: b1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 1 &bt BT_SEL 1>;
            label = "B1";
        };
    };

    behaviors {
        behaviorHoldTap180: behaviorHoldTap180 {
            compatible = "zmk,behavior-hold-tap";
            label = "BEHAVIORHOLDTAP180";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            require-prior-idle-ms = <0>;
            tapping-term-ms = <180>;
        };

        behaviorTapDance1: behaviorTapDance1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BEHAVIORTAPDANCE1";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1>, <&kp ENTER>, <&mo 1>;
        };

        behaviorHoldTap150: behaviorHoldTap150 {
            compatible = "zmk,behavior-hold-tap";
            label = "BEHAVIORHOLDTAP150";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        behaviorHoldTapTap: behaviorHoldTapTap {
            compatible = "zmk,behavior-hold-tap";
            label = "BEHAVIORHOLDTAPTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q      &kp W     &kp E             &kp R                    &kp T                        &behaviorHoldTap180 6 LA(F)         &kp DELETE                             &kp Y                             &kp U  &kp I      &kp O       &kp P
&kp A      &kp S     &kp D             &kp F                    &kp G                                                            &kp TAB                                &kp H                             &kp J  &kp K      &kp L       &kp BACKSPACE
&kp Z      &kp X     &kp C             &kp V                    &kp B                                                                                                   &kp N                             &kp M  &kp COMMA  &kp PERIOD  &kp MINUS
&kp LSHFT  &kp LALT  &kp LEFT_CONTROL  &mt LEFT_COMMAND ESCAPE  &behaviorHoldTap180 2 LANG2  &behaviorHoldTapTap LEFT_ALT SPACE  &behaviorHoldTap150 RIGHT_SHIFT ENTER  &behaviorHoldTap180 1 LANGUAGE_1                                &kp EQUAL
            >;
        };

        layer_1 {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp HASH          &kp DOLLAR         &kp PERCENT    &trans  &trans  &kp SLASH      &kp LEFT_PARENTHESIS  &kp UP_ARROW    &kp RIGHT_PARENTHESIS  &kp QUESTION
&kp GRAVE        &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp AMPERSAND          &trans  &kp CARET      &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW        &trans
&kp TILDE        &kp PIPE       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp ASTERISK                   &kp SEMICOLON  &kp SQT               &kp LESS_THAN   &kp GREATER_THAN       &kp UNDERSCORE
&trans           &trans         &trans            &trans             &trans         &trans  &trans  &trans                                                                      &kp PLUS
            >;
        };

        layer_2 {
            bindings = <
&kp Q      &kp LG(W)           &kp LC(UP_ARROW)        &kp LG(R)                &trans  &trans  &trans  &kp SLASH   &kp N7        &kp N8        &kp N9        &kp ASTERISK
&trans     &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)      &kp LC(RIGHT_ARROW)      &trans          &trans  &kp PERIOD  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans
&kp LG(Z)  &trans              &kp LG(LA(LEFT_ARROW))  &kp LA(LG(RIGHT_ARROW))  &trans                  &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
&trans     &trans              &trans                  &trans                   &trans  &trans  &trans  &trans                                                &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &trans                &trans  &trans  &kp QUESTION  &kp LEFT_BRACE      &kp LA(UP_ARROW)    &kp RIGHT_BRACE      &trans
&kp F5  &kp F6   &kp F7   &kp F8   &kp LS(LG(NUMBER_4))          &trans  &trans        &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)  &kp LA(RIGHT_ARROW)  &trans
&kp F9  &kp F10  &kp F11  &kp F12  &kp LS(LG(N5))                        &kp COLON     &kp DOUBLE_QUOTES   &trans              &trans               &trans
&trans  &trans   &trans   &trans   &trans                &trans  &trans  &trans                                                                     &trans
            >;
        };

        layer_4 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans  &trans  &sys_reset   &trans              &trans    &trans    &trans  &bt BT_CLR_ALL
&trans        &trans        &trans  &trans  &trans          &bootloader  &trans              &mkp MB2  &mkp MB1  &mo 5   &trans
&trans        &trans        &trans  &trans  &trans                       &trans              &trans    &trans    &trans  &trans
&trans        &trans        &trans  &trans  &trans  &trans  &kp LG(W)    &kp LG(LEFT_ARROW)                              &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans              &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans     &trans              &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                     &trans              &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LG(W)  &kp LG(LEFT_ARROW)                          &trans
            >;
        };

        layer_6 {
            bindings = <
&b0     &b1     &trans  &trans  &trans  &trans  &trans  &trans  &kp LG(LA(LEFT_ARROW))  &kp LC(UP_ARROW)    &kp LG(LA(RIGHT_ARROW))  &kp LG(RIGHT_ARROW)
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp LC(LEFT_ARROW)      &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)      &kp LG(LEFT_ARROW)
&trans  &trans  &trans  &trans  &trans                  &trans  &trans                  &trans              &trans                   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                       &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        hoge {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
